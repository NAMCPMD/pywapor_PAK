{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mbb-h7OVseqF",
        "outputId": "d9b2518a-913d-4879-8d5c-9125d5ebe007"
      },
      "outputs": [],
      "source": [
        "!pip install pywapor --quiet"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JmlRN53PseqI"
      },
      "source": [
        "### Composites\n",
        "\n",
        "In this notebook we'll take a closer look at how `pre_et_look` works internally. To do so, we'll be using a couple of functions that you'd normally not need to touch, because they are called automatically when you run `pywapor.pre_et_look.main`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "NMiMaLx0seqK"
      },
      "outputs": [],
      "source": [
        "import pywapor\n",
        "\n",
        "folder = r\"/Users/NAMC/Local/3_compositing\"\n",
        "latlim = [25.7, 28.9]\n",
        "lonlim = [30.2, 33.2]\n",
        "timelim = [\"2021-06-01\", \"2021-08-01\"]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SQXNaXg0seqK"
      },
      "source": [
        "Previously, we had a closer look at the keyword-argument `sources`. Here we'll look at another keyword-argument that controls how the \"time_bins\" or \"composites\" are configured. We can look at the documentation again like this."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zkkAnBRCseqK",
        "outputId": "3a9c4ab4-3661-4a16-ec06-bf9e12a924cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Help on function main in module pywapor.pre_et_look:\n",
            "\n",
            "main(folder, latlim, lonlim, timelim, sources='level_1', bin_length='DEKAD', enhancers=[<function lapse_rate at 0x7f34d6ff28b0>])\n",
            "    Prepare input data for `et_look`.\n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    folder : str\n",
            "        Path to folder in which to store (intermediate) data.\n",
            "    latlim : list\n",
            "        Latitude limits of area of interest.\n",
            "    lonlim : list\n",
            "        Longitude limits of area of interest.\n",
            "    timelim : list\n",
            "        Period for which to prepare data.\n",
            "    sources : \"level_1\" | \"level_2\" | \"level_2_v3\" | dict, optional\n",
            "        Configuration for each variable and source, by default `\"level_1\"`.\n",
            "    bin_length : int | \"DEKAD\", optional\n",
            "        Composite length, by_default `\"DEKAD\"`.\n",
            "    enhancers : list, optional\n",
            "        Functions to apply to the xr.Dataset before creating the final\n",
            "        output, by default `[lapse_rate]`.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    xr.Dataset\n",
            "        Dataset with input data for `pywapor.et_look`.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "help(pywapor.pre_et_look.main)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SC-TVz4AseqL"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> * Which keyword-argument control the composite length?\n",
        ">\n",
        "> * What is its default value?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Khq_pMm-vK68"
      },
      "source": [
        "> **Answer**\n",
        ">\n",
        "> * `bin_length`.\n",
        ">\n",
        "> * `\"DEKAD`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xB7DIH4hseqL"
      },
      "source": [
        "One of the first things happening when you run `pre_et_look`, is the creation of a more precise definition of the composites (from here on also referred to as time_bins) for which `pre_et_look` will prepare the data to be used by `et_look`.\n",
        "\n",
        "By combining the period we've selected (i.e. `timelim`) and the `bin_length` we've chosen, `pre_et_look` will create the bins using the function `pywapor.general.compositer.time_bins`. We can run it like this."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "E2RCrKnfseqL"
      },
      "outputs": [],
      "source": [
        "bin_length = \"DEKAD\"\n",
        "\n",
        "bins = pywapor.general.compositer.time_bins(timelim, bin_length)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cG4DzXU7seqL"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> * What does the variable `bins` contain?\n",
        ">\n",
        "> * What is the length of `bins`?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RJDdXeJOseqL",
        "outputId": "dccd0ce6-6611-4ec2-887c-c17b392d7e4f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['2021-06-01T00:00:00.000000000', '2021-06-11T00:00:00.000000000',\n",
              "       '2021-06-21T00:00:00.000000000', '2021-07-01T00:00:00.000000000',\n",
              "       '2021-07-11T00:00:00.000000000', '2021-07-21T00:00:00.000000000',\n",
              "       '2021-08-01T00:00:00.000000000'], dtype='datetime64[ns]')"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Check out bins here.\n",
        "bins"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9eiOzDSNvVVL",
        "outputId": "dc4caf50-e777-442f-ea26-d01719213e27"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(bins)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bGmFcHjZseqL"
      },
      "source": [
        "After defining the bins, `pre_et_look` will start collecting the different datasources. It does this with a function called `pywapor.collect.downloader.collect_sources`. \n",
        "\n",
        "In a previous exercise, we saw that we can get more \"information\" about a level by calling the following function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "-oPl0bA4seqM"
      },
      "outputs": [],
      "source": [
        "lvl1_info = pywapor.general.levels.pre_et_look_levels(\"level_1\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2FZpF6CkseqM"
      },
      "source": [
        "`collect_sources` uses the information stored in `lvl1_info` to determine what to download and how to pre-process that data. In this exercise we don't want all the data needed by `et_look` to download. Instead, we'll only download NDVI data. To do that we'll have to remove some information from `lvl1_info`.\n",
        "\n",
        "> **Question**\n",
        ">\n",
        "> * Which keys does lvl1_info contain?\n",
        ">\n",
        "> * Note: check the Python intro notebook if you forgot how to list a dictionaries keys."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o0w68B7AseqM",
        "outputId": "ea229133-9044-4e7f-8e3c-8f41fe56b050"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "dict_keys(['ndvi', 'r0', 'se_root', 'p', 'z', 'ra', 't_air', 't_air_max', 't_air_min', 'u2m', 'v2m', 'qv', 'p_air', 'p_air_0', 'wv', 'land_mask', 'rs_min', 'z_obst_max', 'lw_offset', 'lw_slope', 'z_oro', 'rn_offset', 'rn_slope', 't_amp_year', 't_opt', 'vpd_slope'])"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# List the keys of lvl1_info\n",
        "lvl1_info.keys()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DocfS2mbseqM"
      },
      "source": [
        "Now we will remove all the keys, except `\"ndvi\"` (and we override one key-value pair)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0B_ti6LWseqM",
        "outputId": "4105c100-8375-4464-ef4c-703d8118c841"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'ndvi': {'products': [{'source': 'MODIS',\n",
              "    'product_name': 'MOD13Q1.061',\n",
              "    'enhancers': 'default',\n",
              "    'is_example': True},\n",
              "   {'source': 'MODIS', 'product_name': 'MYD13Q1.061', 'enhancers': 'default'}],\n",
              "  'composite_type': 'mean',\n",
              "  'temporal_interp': False,\n",
              "  'spatial_interp': 'nearest'}}"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "selected_sources = {k: v for k, v in lvl1_info.items() if k in [\"ndvi\"]}\n",
        "\n",
        "selected_sources[\"ndvi\"][\"temporal_interp\"] = False\n",
        "\n",
        "selected_sources"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rGK1svgIseqN"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> How many keys are left in `selected_sources`?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tBgH0M2yvdg-",
        "outputId": "c2c64d1a-f8a5-48c9-b9ab-97e12aadffa7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(selected_sources)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1yyDkAYBseqN"
      },
      "source": [
        "Now that we have filtered the sources, we can run the function `collect_sources` to download NDVI data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQl8clU6seqN",
        "outputId": "872bf831-d14c-4c60-ebb3-0df440af104e"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "--> Collecting `ndvi` from `MODIS.MOD13Q1.061`.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "NASA username: broodj3ham\n",
            "NASA password: ··········\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "    --> Testing NASA un/pw.\n",
            "    --> NASA un/pw working.\n",
            "    --> Applying 'mask_qa' to `ndvi`.\n",
            "    --> Saving merged data.\n",
            "        > peak-memory-usage: 11.6MB, execution-time: 0:00:02.596478.\n",
            "        > chunksize|dimsize: [time: 5|5, y: 403|403, x: 506|506]\n",
            "        > timesize: 5 [2021-06-02T00:00, ..., 2021-08-05T00:00]\n",
            "--> Collecting `ndvi` from `MODIS.MYD13Q1.061`.\n",
            "    --> Applying 'mask_qa' to `ndvi`.\n",
            "    --> Saving merged data.\n",
            "        > peak-memory-usage: 9.3MB, execution-time: 0:00:02.168170.\n",
            "        > chunksize|dimsize: [time: 4|4, y: 403|403, x: 506|506]\n",
            "        > timesize: 4 [2021-06-10T00:00, ..., 2021-07-28T00:00]\n"
          ]
        }
      ],
      "source": [
        "dss, selected_sources = pywapor.collect.downloader.collect_sources(folder, selected_sources, latlim, lonlim, timelim)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K9VrUxi1seqN"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> What datatype is `dss` and what does it contain?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uwyc1bUYseqN",
        "outputId": "4576cf18-84b8-445e-e1c1-4a8b4089c44c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{('MODIS',\n",
              "  'MOD13Q1.061'): '/Users/hmcoerver/Local/3_compositing/MODIS/MOD13Q1.061.nc',\n",
              " ('MODIS',\n",
              "  'MYD13Q1.061'): '/Users/hmcoerver/Local/3_compositing/MODIS/MYD13Q1.061.nc'}"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Inspect the variables dss here.\n",
        "dss"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "03w5LASvwCKg"
      },
      "source": [
        "> **Answer**\n",
        ">\n",
        "> * `dss` is a dictionary.\n",
        ">\n",
        "> * It contains the paths to the files in which the different products are stored."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yFKpX8ahseqN"
      },
      "source": [
        "Next we'll define a new function that can plot timeseries from netcdf files."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "zRpWUzEqseqN"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import xarray as xr\n",
        "import numpy as np\n",
        "\n",
        "def plot_timeseries(dss, latlon, composites = None, var = \"ndvi\", unit = \"-\"):\n",
        "    fig = plt.figure(figsize = (7, 3), dpi=100)\n",
        "    ax = fig.gca()\n",
        "\n",
        "    if not isinstance(composites, type(None)):\n",
        "        x = composites.time_bins.values\n",
        "        y = composites.sel(y = latlon[0], x = latlon[1], method = \"nearest\")[var].values\n",
        "        width = np.diff(bins) \n",
        "        ax.bar(x, y, width = width, align = \"edge\", color = \"lightblue\", edgecolor = \"darkblue\", zorder = 8, alpha = 0.8)\n",
        "\n",
        "    for product, ds_fh in dss.items():\n",
        "        ds = xr.open_dataset(ds_fh, decode_coords = \"all\")\n",
        "        y = ds.sel(y = latlon[0], x = latlon[1], method = \"nearest\")[var].values\n",
        "        x = ds.time.values\n",
        "        ax.scatter(x, y, label = \".\".join(product), zorder = 10)\n",
        "\n",
        "    ax.legend()\n",
        "    ax.grid(zorder = 0)\n",
        "    ax.set_facecolor(\"lightgray\")\n",
        "    ax.set_xlabel(\"time\")\n",
        "    ax.set_ylabel(f\"{var} [{unit}]\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZBzZWN5MseqO"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> Which arguments does this function require?\n",
        ">\n",
        "> Which keyword-arguments can this function take?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BBojhN0TwLxK"
      },
      "source": [
        "> **Answer**\n",
        ">\n",
        "> * `dss` and `latlon`.\n",
        ">\n",
        "> * `composites`, `var` and `unit`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4wRkmwRGseqO"
      },
      "source": [
        "With this function we can plot timeseries at a chosen point of interest. We can define a point by making a list with a latitude and a longitude value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "id": "DQVijX4jseqO",
        "outputId": "a878e99a-811e-4c0e-bf71-0eec0c75d54c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "latlon = [29.32301, 30.77599]\n",
        "plot_timeseries(dss, latlon)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K5roSFYvseqO"
      },
      "source": [
        "Next, we'll run the functions that turns these seperate measurements into composites (again, normally this is done internally when you run `pywapor.pre_et_look.main`). Note that we pass an empty list here for the `enhancers` argument, we'll get back to enhancers at a later point. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OYrk6jWgseqO",
        "outputId": "6236655e-c5e5-4c26-9072-7cf273d992a0"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "--> Compositing 1 variables.\n",
            "    --> (1/1) Compositing `ndvi` (mean).\n",
            "        --> Using `MYD13Q1.061.nc` as reprojecting example.\n",
            "            > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "        --> Saving `ndvi` composites.\n",
            "            > peak-memory-usage: 40.6MB, execution-time: 0:00:02.087811.\n",
            "            > chunksize|dimsize: [time_bins: 6|6, y: 403|403, x: 506|506]\n",
            "--> Using `MOD13Q1.061.nc` as reprojecting example.\n",
            "    > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "--> Creating merged file `et_look_in.nc`.\n",
            "    > peak-memory-usage: 28.0MB, execution-time: 0:00:02.174481.\n",
            "    > chunksize|dimsize: [time_bins: 6|6, y: 403|403, x: 506|506]\n"
          ]
        }
      ],
      "source": [
        "enhancers = []\n",
        "ds_composites = pywapor.general.compositer.main(dss, selected_sources, folder, enhancers, bins)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KGQdK8U-seqO"
      },
      "source": [
        "> **Question**\n",
        "> \n",
        "> * What is the datatype of `ds_composites`?\n",
        ">\n",
        "> * Which dimensions and sizes does `ndvi` in `ds_composites` have. Does that correspond to what you saw in the graph above."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "hm-V00Q1seqO",
        "outputId": "e12c83e0-76c9-4942-96b3-d17c02de5bc6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'xarray.core.dataset.Dataset'>\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body[data-theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block !important;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-index-preview {\n",
              "  grid-column: 2 / 5;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data,\n",
              ".xr-index-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data,\n",
              ".xr-index-data-in:checked ~ .xr-index-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-index-name div,\n",
              ".xr-index-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data,\n",
              ".xr-index-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2,\n",
              ".xr-no-icon {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
              "Dimensions:      (time_bins: 6, y: 403, x: 506)\n",
              "Coordinates:\n",
              "  * x            (x) float64 30.2 30.2 30.2 30.21 30.21 ... 31.19 31.2 31.2 31.2\n",
              "  * y            (y) float64 29.7 29.7 29.7 29.69 ... 28.91 28.91 28.9 28.9\n",
              "    spatial_ref  int64 ...\n",
              "  * time_bins    (time_bins) datetime64[ns] 2021-06-01 2021-06-11 ... 2021-07-21\n",
              "Data variables:\n",
              "    ndvi         (time_bins, y, x) float64 dask.array&lt;chunksize=(6, 403, 506), meta=np.ndarray&gt;</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-bf143ee6-e4db-4d49-8a45-a90324412e35' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-bf143ee6-e4db-4d49-8a45-a90324412e35' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>time_bins</span>: 6</li><li><span class='xr-has-index'>y</span>: 403</li><li><span class='xr-has-index'>x</span>: 506</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-cbf970b5-091b-4c15-9a51-a7b286c9bd6a' class='xr-section-summary-in' type='checkbox'  checked><label for='section-cbf970b5-091b-4c15-9a51-a7b286c9bd6a' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>30.2 30.2 30.2 ... 31.2 31.2 31.2</div><input id='attrs-2158cdc6-e31e-4f2e-b54c-868856692fa9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2158cdc6-e31e-4f2e-b54c-868856692fa9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-504de621-8a83-4c29-9ccf-0db697568863' class='xr-var-data-in' type='checkbox'><label for='data-504de621-8a83-4c29-9ccf-0db697568863' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>axis :</span></dt><dd>X</dd><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>units :</span></dt><dd>degrees_east</dd></dl></div><div class='xr-var-data'><pre>array([30.199116, 30.201099, 30.203082, ..., 31.196461, 31.198443, 31.200426])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>29.7 29.7 29.7 ... 28.91 28.9 28.9</div><input id='attrs-8d396555-9105-4ed0-ae27-f9143a49bbe0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8d396555-9105-4ed0-ae27-f9143a49bbe0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-89132863-1234-40d3-a32c-065f5233a11a' class='xr-var-data-in' type='checkbox'><label for='data-89132863-1234-40d3-a32c-065f5233a11a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>axis :</span></dt><dd>Y</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>units :</span></dt><dd>degrees_north</dd></dl></div><div class='xr-var-data'><pre>array([29.70005 , 29.698067, 29.696085, ..., 28.906933, 28.904951, 28.902968])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>spatial_ref</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-81cff766-650e-4f14-9f16-cabbf18c709d' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-81cff766-650e-4f14-9f16-cabbf18c709d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-13c82f71-a5ac-422d-98b6-2011d464d23f' class='xr-var-data-in' type='checkbox'><label for='data-13c82f71-a5ac-422d-98b6-2011d464d23f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>crs_wkt :</span></dt><dd>GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Latitude&quot;,NORTH],AXIS[&quot;Longitude&quot;,EAST],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314245179</dd><dt><span>inverse_flattening :</span></dt><dd>298.257223563</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>WGS 84</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>WGS 84</dd><dt><span>grid_mapping_name :</span></dt><dd>latitude_longitude</dd><dt><span>spatial_ref :</span></dt><dd>GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Latitude&quot;,NORTH],AXIS[&quot;Longitude&quot;,EAST],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</dd><dt><span>GeoTransform :</span></dt><dd>30.198124670407314 0.001982792281130139 0.0 29.70104166399938 0.0 -0.001982792281130138</dd></dl></div><div class='xr-var-data'><pre>[1 values with dtype=int64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time_bins</span></div><div class='xr-var-dims'>(time_bins)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2021-06-01 ... 2021-07-21</div><input id='attrs-6c1a176a-0769-43cd-9980-f12b7af4a52f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6c1a176a-0769-43cd-9980-f12b7af4a52f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-397f7f74-deb0-4c3f-894b-0a822907654e' class='xr-var-data-in' type='checkbox'><label for='data-397f7f74-deb0-4c3f-894b-0a822907654e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2021-06-01T00:00:00.000000000&#x27;, &#x27;2021-06-11T00:00:00.000000000&#x27;,\n",
              "       &#x27;2021-06-21T00:00:00.000000000&#x27;, &#x27;2021-07-01T00:00:00.000000000&#x27;,\n",
              "       &#x27;2021-07-11T00:00:00.000000000&#x27;, &#x27;2021-07-21T00:00:00.000000000&#x27;],\n",
              "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-a20168c6-0ec1-445b-81c2-e11531874cd7' class='xr-section-summary-in' type='checkbox'  checked><label for='section-a20168c6-0ec1-445b-81c2-e11531874cd7' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>ndvi</span></div><div class='xr-var-dims'>(time_bins, y, x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(6, 403, 506), meta=np.ndarray&gt;</div><input id='attrs-2b347388-b835-46bb-9c66-2816a65ed946' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2b347388-b835-46bb-9c66-2816a65ed946' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-36100cc5-a40f-4c8c-9950-a96e024477ac' class='xr-var-data-in' type='checkbox'><label for='data-36100cc5-a40f-4c8c-9950-a96e024477ac' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><table>\n",
              "    <tr>\n",
              "        <td>\n",
              "            <table>\n",
              "                <thead>\n",
              "                    <tr>\n",
              "                        <td> </td>\n",
              "                        <th> Array </th>\n",
              "                        <th> Chunk </th>\n",
              "                    </tr>\n",
              "                </thead>\n",
              "                <tbody>\n",
              "                    \n",
              "                    <tr>\n",
              "                        <th> Bytes </th>\n",
              "                        <td> 9.33 MiB </td>\n",
              "                        <td> 9.33 MiB </td>\n",
              "                    </tr>\n",
              "                    \n",
              "                    <tr>\n",
              "                        <th> Shape </th>\n",
              "                        <td> (6, 403, 506) </td>\n",
              "                        <td> (6, 403, 506) </td>\n",
              "                    </tr>\n",
              "                    <tr>\n",
              "                        <th> Count </th>\n",
              "                        <td> 2 Tasks </td>\n",
              "                        <td> 1 Chunks </td>\n",
              "                    </tr>\n",
              "                    <tr>\n",
              "                    <th> Type </th>\n",
              "                    <td> float64 </td>\n",
              "                    <td> numpy.ndarray </td>\n",
              "                    </tr>\n",
              "                </tbody>\n",
              "            </table>\n",
              "        </td>\n",
              "        <td>\n",
              "        <svg width=\"195\" height=\"161\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
              "\n",
              "  <!-- Horizontal lines -->\n",
              "  <line x1=\"10\" y1=\"0\" x2=\"25\" y2=\"15\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"10\" y1=\"95\" x2=\"25\" y2=\"111\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Vertical lines -->\n",
              "  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"95\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"25\" y1=\"15\" x2=\"25\" y2=\"111\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Colored Rectangle -->\n",
              "  <polygon points=\"10.0,0.0 25.439388221553124,15.439388221553125 25.439388221553124,111.0125107511974 10.0,95.57312252964427\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
              "\n",
              "  <!-- Horizontal lines -->\n",
              "  <line x1=\"10\" y1=\"0\" x2=\"130\" y2=\"0\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"25\" y1=\"15\" x2=\"145\" y2=\"15\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Vertical lines -->\n",
              "  <line x1=\"10\" y1=\"0\" x2=\"25\" y2=\"15\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"130\" y1=\"0\" x2=\"145\" y2=\"15\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Colored Rectangle -->\n",
              "  <polygon points=\"10.0,0.0 130.0,0.0 145.43938822155312,15.439388221553125 25.439388221553124,15.439388221553125\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
              "\n",
              "  <!-- Horizontal lines -->\n",
              "  <line x1=\"25\" y1=\"15\" x2=\"145\" y2=\"15\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"25\" y1=\"111\" x2=\"145\" y2=\"111\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Vertical lines -->\n",
              "  <line x1=\"25\" y1=\"15\" x2=\"25\" y2=\"111\" style=\"stroke-width:2\" />\n",
              "  <line x1=\"145\" y1=\"15\" x2=\"145\" y2=\"111\" style=\"stroke-width:2\" />\n",
              "\n",
              "  <!-- Colored Rectangle -->\n",
              "  <polygon points=\"25.439388221553124,15.439388221553125 145.43938822155312,15.439388221553125 145.43938822155312,111.0125107511974 25.439388221553124,111.0125107511974\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
              "\n",
              "  <!-- Text -->\n",
              "  <text x=\"85.439388\" y=\"131.012511\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >506</text>\n",
              "  <text x=\"165.439388\" y=\"63.225949\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,165.439388,63.225949)\">403</text>\n",
              "  <text x=\"7.719694\" y=\"123.292817\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(45,7.719694,123.292817)\">6</text>\n",
              "</svg>\n",
              "        </td>\n",
              "    </tr>\n",
              "</table></div></li></ul></div></li><li class='xr-section-item'><input id='section-3e650f4b-a40c-431d-8d71-1c23df75ff2a' class='xr-section-summary-in' type='checkbox'  ><label for='section-3e650f4b-a40c-431d-8d71-1c23df75ff2a' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-014cd14c-8b02-400c-8c6b-c9e4f9204b4b' class='xr-index-data-in' type='checkbox'/><label for='index-014cd14c-8b02-400c-8c6b-c9e4f9204b4b' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([ 30.19911606654788, 30.201098858829013, 30.203081651110143,\n",
              "              30.205064443391272, 30.207047235672402,  30.20903002795353,\n",
              "              30.211012820234664, 30.212995612515794, 30.214978404796923,\n",
              "              30.216961197078053,\n",
              "              ...\n",
              "               31.18258103798843,  31.18456383026956,  31.18654662255069,\n",
              "               31.18852941483182,  31.19051220711295,  31.19249499939408,\n",
              "               31.19447779167521,  31.19646058395634,  31.19844337623747,\n",
              "                31.2004261685186],\n",
              "             dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;, length=506))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-cb25a712-8f55-49da-ab4a-678c30821c3b' class='xr-index-data-in' type='checkbox'/><label for='index-cb25a712-8f55-49da-ab4a-678c30821c3b' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([29.700050267858813, 29.698067475577684, 29.696084683296554,\n",
              "               29.69410189101542, 29.692119098734292, 29.690136306453162,\n",
              "              29.688153514172033, 29.686170721890903, 29.684187929609774,\n",
              "               29.68220513732864,\n",
              "              ...\n",
              "               28.92081290137467,  28.91883010909354, 28.916847316812408,\n",
              "               28.91486452453128,  28.91288173225015,  28.91089893996902,\n",
              "               28.90891614768789,  28.90693335540676, 28.904950563125627,\n",
              "              28.902967770844498],\n",
              "             dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;, length=403))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>time_bins</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f1e5087b-017c-4896-9a45-a0c1f13d824f' class='xr-index-data-in' type='checkbox'/><label for='index-f1e5087b-017c-4896-9a45-a0c1f13d824f' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2021-06-01&#x27;, &#x27;2021-06-11&#x27;, &#x27;2021-06-21&#x27;, &#x27;2021-07-01&#x27;,\n",
              "               &#x27;2021-07-11&#x27;, &#x27;2021-07-21&#x27;],\n",
              "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time_bins&#x27;, freq=None))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1af46db7-28a7-4c14-b579-794c18adbab8' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-1af46db7-28a7-4c14-b579-794c18adbab8' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
            ],
            "text/plain": [
              "<xarray.Dataset>\n",
              "Dimensions:      (time_bins: 6, y: 403, x: 506)\n",
              "Coordinates:\n",
              "  * x            (x) float64 30.2 30.2 30.2 30.21 30.21 ... 31.19 31.2 31.2 31.2\n",
              "  * y            (y) float64 29.7 29.7 29.7 29.69 ... 28.91 28.91 28.9 28.9\n",
              "    spatial_ref  int64 ...\n",
              "  * time_bins    (time_bins) datetime64[ns] 2021-06-01 2021-06-11 ... 2021-07-21\n",
              "Data variables:\n",
              "    ndvi         (time_bins, y, x) float64 dask.array<chunksize=(6, 403, 506), meta=np.ndarray>"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Inspect ds_composites here\n",
        "print(type(ds_composites))\n",
        "ds_composites"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Je_NK-ewcLc"
      },
      "source": [
        "> **Answer**\n",
        ">\n",
        "> * The datatype is a `xarray.Dataset`.\n",
        ">\n",
        "> * The dataset has three dimensions (`time_bins`, `x` and `y`). `x` has a size of 506, `y` has a size of 403 and `time_bins` a size of 6. In the graphs above, there were 9 temporal points, here there are only 6 left."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4cjmLGYfseqO"
      },
      "source": [
        "Now we can pass this dataset to the function we've created earlier as a keyword-argument. \n",
        "\n",
        "> **Question**\n",
        ">\n",
        "> Re-run the function used defined earlier, but now with the keyword-argument `composites` set to `ds_composites`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "id": "K3Es0dUtseqP",
        "outputId": "742d61fc-eae2-49fc-ccb7-cdaefff9d9ea"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Rerun the plotting function here.\n",
        "plot_timeseries(dss, latlon, composites = ds_composites)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CvFPLDwuseqP"
      },
      "source": [
        "In the graph we have just created, you should see a couple of things. First of all, there are blue-dots and orange-dots that show available NDVI measurements at our POI, coming from MOD13 and MYD13 respectively. Then there are blue bars that show the composite pixel values at this location. \n",
        "\n",
        "> **Question**\n",
        "> \n",
        "> How many days wide are the blue bars\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aa05ECY9xRR7"
      },
      "source": [
        "> **Answer**\n",
        ">\n",
        "> They are roughly 10 days wide."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zteFDQA2xOPg"
      },
      "source": [
        "\n",
        "Each composite value is the mean of the available measurements within the respective `time_bin`. For example, most of the bars match with some of the measurements. While the first bar is exactly in between two measurements, i.e. it’s the mean of the two available measurements.\n",
        "\n",
        "> **Question**\n",
        ">\n",
        "> Now lets adjust the width of the composites, to be 6 days instead of dekadal. Can you recalculate the variable `bins` with a `bin_length` of 6 days"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "b9R9-XOCseqP"
      },
      "outputs": [],
      "source": [
        "# Recalculate the bins here\n",
        "bin_length = 6\n",
        "\n",
        "bins = pywapor.general.compositer.time_bins(timelim, bin_length)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A8ij7GwjseqQ"
      },
      "source": [
        "> **Question**\n",
        "> \n",
        "> * What is the length of `bins`?\n",
        ">\n",
        "> * Can you recalculate the composites?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lAfE0ochxl77",
        "outputId": "ec2378d7-cf47-40d8-d887-43b236546a63"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(bins)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OkHUnJjLseqQ",
        "outputId": "1be11518-b2b7-409c-94ef-b497be4ad6f8"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "--> Compositing 1 variables.\n",
            "    --> (1/1) Compositing `ndvi` (mean).\n",
            "        --> Using `MYD13Q1.061.nc` as reprojecting example.\n",
            "            > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "        --> Saving `ndvi` composites.\n",
            "            > peak-memory-usage: 68.5MB, execution-time: 0:00:02.069883.\n",
            "            > chunksize|dimsize: [time_bins: 11|11, y: 403|403, x: 506|506]\n",
            "--> Using `MOD13Q1.061.nc` as reprojecting example.\n",
            "    > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "--> Creating merged file `et_look_in_.nc`.\n",
            "    > peak-memory-usage: 51.3MB, execution-time: 0:00:02.251936.\n",
            "    > chunksize|dimsize: [time_bins: 11|11, y: 403|403, x: 506|506]\n"
          ]
        }
      ],
      "source": [
        "# Recalculate `ds_composites` here.\n",
        "ds_composites = pywapor.general.compositer.main(dss, selected_sources, folder, enhancers, bins)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jRX1fsFAseqQ"
      },
      "source": [
        "> **Question**\n",
        ">\n",
        "> Now make a new plot."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "id": "va7t1VRbseqQ",
        "outputId": "e5262f51-9514-44ff-bb28-789a88e29ad6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Make another plot here\n",
        "plot_timeseries(dss, latlon, composites = ds_composites)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N2f6DE7RseqR"
      },
      "source": [
        "> **Question** \n",
        ">\n",
        "> Do you see anything unusual in this plot?\n",
        "\n",
        "> **Answer**\n",
        ">\n",
        "> There seem to be two bins missing.\n",
        "\n",
        "We can solve this by turning on temporal interpolation for NDVI. The temporal interpolation is defined inside the variable `selected_sources`.\n",
        "\n",
        "> **Question**\n",
        ">\n",
        "> * Can you set the key `temporal_interp` inside `selected_sources` to `\"linear\"`?\n",
        ">\n",
        "> * Hint: near the beginnning of this exercise we have already set it to `False`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "Ng1C3wvWseqR"
      },
      "outputs": [],
      "source": [
        "# Adjust the settings for tempoeral_interpolation of ndvi here.\n",
        "selected_sources[\"ndvi\"][\"temporal_interp\"] = \"linear\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n9bY0m1CseqR"
      },
      "source": [
        "Now we can run the compositer again and create another plot."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "pD1a-bTIseqR",
        "outputId": "eaa132e8-6293-42b2-9b36-6db93cbd994c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "--> Compositing 1 variables.\n",
            "    --> (1/1) Compositing `ndvi` (mean).\n",
            "        --> Using `MYD13Q1.061.nc` as reprojecting example.\n",
            "            > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "        --> Saving `ndvi` composites.\n",
            "            > peak-memory-usage: 68.5MB, execution-time: 0:00:10.100898.\n",
            "            > chunksize|dimsize: [time_bins: 11|11, y: 403|403, x: 506|506]\n",
            "--> Using `MOD13Q1.061.nc` as reprojecting example.\n",
            "    > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "--> Creating merged file `et_look_in__.nc`.\n",
            "    > peak-memory-usage: 51.4MB, execution-time: 0:00:02.281721.\n",
            "    > chunksize|dimsize: [time_bins: 11|11, y: 403|403, x: 506|506]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "ds_composites = pywapor.general.compositer.main(dss, selected_sources, folder, enhancers, bins)\n",
        "plot_timeseries(dss, latlon, composites = ds_composites)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WGGzBl58seqR"
      },
      "source": [
        "The two composites that were previously missing are now there! Note that although here we are looking at one pixel, these interpolations are done for the entire domain.\n",
        "\n",
        "Possible values for `\"temporal_interp\"` are `False`, `\"linear\"`, `\"nearest\"`, `\"zero\"`, `\"slinear\"`, `\"quadratic\"` or `\"cubic\"`. But be aware that some of these can be computationally heavy.\n",
        "\n",
        "#### Your turn!\n",
        "\n",
        "> **Question**\n",
        "> \n",
        "> * What happens when you create very small or large bins?\n",
        ">\n",
        "> * Try out the other interpolation methods.\n",
        ">\n",
        "> * What happens when you change the `\"composite_type\"` from `\"mean\"` to `\"max\"` or `\"min\"`?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "byj997rwx9V4",
        "outputId": "030050ec-ba6a-4301-a550-7bfb2df7e8e4"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "--> Compositing 1 variables.\n",
            "    --> (1/1) Compositing `ndvi` (max).\n",
            "        --> Using `MYD13Q1.061.nc` as reprojecting example.\n",
            "            > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "        --> Saving `ndvi` composites.\n",
            "            > peak-memory-usage: 42.1MB, execution-time: 0:00:08.081023.\n",
            "            > chunksize|dimsize: [time_bins: 4|4, y: 403|403, x: 506|506]\n",
            "--> Using `MOD13Q1.061.nc` as reprojecting example.\n",
            "    > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "--> Creating merged file `et_look_in___.nc`.\n",
            "    > peak-memory-usage: 18.7MB, execution-time: 0:00:02.137254.\n",
            "    > chunksize|dimsize: [time_bins: 4|4, y: 403|403, x: 506|506]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "bin_length = 20\n",
        "\n",
        "bins = pywapor.general.compositer.time_bins(timelim, bin_length)\n",
        "\n",
        "selected_sources[\"ndvi\"][\"temporal_interp\"] = \"nearest\"\n",
        "selected_sources[\"ndvi\"][\"composite_type\"] = \"max\"\n",
        "\n",
        "ds_composites = pywapor.general.compositer.main(dss, selected_sources, folder, enhancers, bins)\n",
        "plot_timeseries(dss, latlon, composites = ds_composites)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "p-hUiSjuyPQ1",
        "outputId": "301408e0-d12c-4d80-db4f-4c59979d9d2f"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "                        --> Compositing 1 variables.\n",
            "                            --> (1/1) Compositing `ndvi` (mean).\n",
            "                                --> Using `MYD13Q1.061.nc` as reprojecting example.\n",
            "                                    > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "                                --> Saving `ndvi` composites.\n",
            "                                    > peak-memory-usage: 385.9MB, execution-time: 0:00:52.369295.\n",
            "                                    > chunksize|dimsize: [time_bins: 62|62, y: 403|403, x: 506|506]\n",
            "                        --> Using `MOD13Q1.061.nc` as reprojecting example.\n",
            "                            > shape: (403, 506), res: 0.0020° x 0.0020°.\n",
            "                        --> Creating merged file `et_look_in____.nc`.\n",
            "                            > peak-memory-usage: 289.3MB, execution-time: 0:00:03.295745.\n",
            "                            > chunksize|dimsize: [time_bins: 62|62, y: 403|403, x: 506|506]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x300 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "bin_length = 1\n",
        "\n",
        "bins = pywapor.general.compositer.time_bins(timelim, bin_length)\n",
        "\n",
        "selected_sources[\"ndvi\"][\"temporal_interp\"] = \"slinear\"\n",
        "selected_sources[\"ndvi\"][\"composite_type\"] = \"mean\"\n",
        "\n",
        "ds_composites = pywapor.general.compositer.main(dss, selected_sources, folder, enhancers, bins)\n",
        "plot_timeseries(dss, latlon, composites = ds_composites)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "my_pywapor_env",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "f48146314f5296ea1fc917967f917f4df0e4af7b26ae86a210ce5d985781609c"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
